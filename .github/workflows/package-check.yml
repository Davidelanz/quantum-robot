name: Package Check

on:
  workflow_dispatch:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  formatting:
    timeout-minutes: 5
    name: üîé Formatting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Install dependencies
        run: poetry install

      - name: Check formatting with isort and black
        run: |
          poetry run isort --diff .
          poetry run black --diff .

  mypy:
    timeout-minutes: 5
    name: üîé Type hinting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Install dependencies
        run: poetry install

      - name: Run MyPy
        run: poetry run mypy .
        continue-on-error: true

  pylint:
    timeout-minutes: 5
    name: üîé Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Install dependencies
        run: poetry install

      - name: Lint with pylint
        run: poetry run pylint src
        continue-on-error: true

  test:
    timeout-minutes: 5
    needs: [formatting, mypy, pylint]
    name: ü™ñ Testing
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Install dependencies
        run: poetry install

      - name: Install redis
        run: sudo apt-get install -y redis-tools redis-server

      - name: Test code
        # To exclude redis tests:
        # poetry run coverage run -m pytest -m "not redistest"
        run: |
          poetry run coverage run -m pytest 
          poetry run coverage xml -o .coverage.xml
          poetry run coverage report -m --skip-covered

      - name: Upload coverage report to GitHub
        uses: 5monkeys/cobertura-action@master
        with:
          path: .coverage.xml
          minimum_coverage: 70
          repo_token: ${{github.token}}
          skip_covered: true

      - name: Upload coverage report to CodeCov
        uses: codecov/codecov-action@v3
        with:
          files: ./.coverage.xml

  build:
    timeout-minutes: 5
    needs: [test]
    name: üõ†Ô∏è Building
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Install dependencies
        run: poetry install

      - name: Build package
        run: poetry build

  docs:
    timeout-minutes: 5
    name: üìñ Documentation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Install dependencies
        run: poetry install

      - name: Install Pandoc and Graphviz
        run: |
          sudo apt-get update -y
          sudo apt install pandoc -y
          sudo apt install graphviz -y

      - name: Generate Sphinx docs
        run: poetry run sphinx-build -a -E -W --keep-going docs ./.sphinx-docs
        # -a (write all files)
        # -E (don't use a saved environment, always read all files)
        # -W (turn warnings into errors)
        # -n (nit-picky mode, warn about all missing references)
        # --keep-going (with -W, keep going when getting warnings)
        continue-on-error: true

      - name: Archive sphinx docs for 2 days
        uses: actions/upload-artifact@v3
        with:
          name: sphinx-docs
          path: ./.sphinx-docs/
          retention-days: 2
